// @flow

export type Tags = { [key: string]: Array<string> };

export type SourceLocation = { [key: string]: string };

export type Experience = {
    stories: Array<Story>,
    narrative_elements: Array<NarrativeElement>,
    representation_collections: Array<RepresentationCollection>,
    representations: Array<Representation>,
    asset_collections: Array<AssetCollection>,
}

export type Beginning = {
    narrative_element_id: string,
    condition: any,
};

export type Link = {
    link_type: string,
    condition: any,
    description?: string,
    target_narrative_element_id?: string,
};

export type NarrativeElement = {
    id: string,
    version: string,
    name: string,
    description: string,
    tags: Tags,
    body: {
        type: string,
        representation_collection_target_id?: string,
        story_target_id?: string,
    },
    links: Array<Link>,
};

export type Story = {
    id: string,
    version: string,
    name: string,
    tags?: Tags,
    beginnings: Array<Beginning>,
    narrative_element_ids: Array<string>,
    meta?: any,
    variables?: Object,
};

export type DataResolver = {
    get: (name: string) => Promise<any>,
    set: (name: string, value: any) => any,
}

export type StoryFetcher = (id: string) => Promise<Story>;

export type NarrativeElementFetcher = (id: string) => Promise<NarrativeElement>;

export type RepresentationChoice = {
    label: string,
    choice_representation_id: string,
    choice_representation?: Representation,
}

export type Representation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representation_type: string,
    asset_collections: {
        foreground_id?: string,
        background_ids?: Array<string>,
        icon?: {
            default_id: string,
            active_id?: string,
        },
        behaviours?: Array<{
            behaviour_asset_collection_mapping_id: string,
            asset_collection_id: string
        }>
    },
    choices?: Array<RepresentationChoice>,
    behaviours?: {
        started?: Array<{
            type: string,
            pauseTime?: number,
            colour?: string,
            image?: string,
            blur?: string,
        }>,
        completed?: Array<{
            type: string,
            pauseTime?: number,
            colour?: string,
            image?: string,
            blur?: string,
        }>,
    },
};

export type RepresentationFetcher = (id: string) => Promise<Representation>;

export type AssetCollection = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    asset_collection_type: string,
    assets: {
        audio_src?: string,
        image_src?: string,
        av_src?: string,
        sub_src?: string,
    },
};

export type AssetCollectionFetcher = (id: string) => Promise<AssetCollection>;

export type RepresentationCollection = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representations: Array<{
        representation_id: string,
        condition: any,
    }>,
};

export type RepresentationCollectionFetcher = (id: string) => Promise<RepresentationCollection>;

export type MediaFetcher = (uri: string) => Promise<string>;

export type BaseRenderer = {
    representation: Representation,
    assetCollectionFetcher: AssetCollectionFetcher,
    mediaFetcher: MediaFetcher,
    target: HTMLElement,
};

export type Renderers = { [type: string]: Class<BaseRenderer> };

export type Settings = {
    target: HTMLElement,
    renderers?: Renderers,
    dataResolver: DataResolver,
    storyFetcher: StoryFetcher,
    narrativeElementFetcher: NarrativeElementFetcher,
    representationCollectionFetcher: RepresentationCollectionFetcher,
    representationFetcher: RepresentationFetcher,
    mediaFetcher: MediaFetcher,
};
