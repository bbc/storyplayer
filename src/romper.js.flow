// @flow

export type Tags = { [key: string]: Array<string> };

export type SourceLocation = { [key: string]: string };

export type Experience = {
    stories: Array<Story>,
    narrative_elements: Array<NarrativeElement>,
    representation_collections: Array<RepresentationCollection>,
    representations: Array<Representation>,
    asset_collections: Array<AssetCollection>,
}

export type Beginning = {
    narrative_element_id: string,
    condition: any,
};

export type Link = {
    link_type: string,
    condition: any,
    description?: string,
    target_narrative_element_id?: string,
    link_rank?: number,
};

export type Story = {
    id: string,
    version: string,
    name: string,
    tags?: Tags,
    beginnings: Array<Beginning>,
    narrative_element_ids: Array<string>,
    meta?: Object,
    variables?: Object,
};

export type NarrativeElement = {
    id: string,
    version: string,
    name: string,
    description: string,
    tags: Tags,
    body: {
        type: string,
        representation_collection_target_id?: string,
        story_target_id?: string,
    },
    links: Array<Link>,
};

export type RepresentationCollection = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representations: Array<{
        representation_id: string,
        condition: any,
    }>,
};

export type RepresentationChoice = {
    label: string,
    choice_representation_id: string,
    choice_representation?: Representation,
}

export type Representation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representation_type: string,
    asset_collections: {
        foreground_id?: string,
        background_ids?: Array<string>,
        icon?: {
            default_id: string,
            active_id?: string,
        },
        link_assets?: Array<{
            target_narrative_element_id: string,
            asset_collection_id: string,
        }>,
        behaviours?: Array<{
            behaviour_asset_collection_mapping_id: string,
            asset_collection_id: string
        }>
    },
    duration?: number,
    meta?: Object,
    choices?: Array<RepresentationChoice>,
    behaviours?: {
        started?: Array<{
            type: string,
            pauseTime?: number,
            colour?: string,
            image?: string,
            blur?: string,
            show_ne_to_end?: boolean,
            one_shot?: boolean,
            disable_controls?: boolean,
            show_time_remaining?: boolean,
            force_choice?: boolean,
            overlay_class?: string,
        }>,
        completed?: Array<{
            type: string,
            pauseTime?: number,
            colour?: string,
            image?: string,
            blur?: string,
            show_ne_to_end?: boolean,
            one_shot?: boolean,
            disable_controls?: boolean,
            show_time_remaining?: boolean,
            force_choice?: boolean,
            overlay_class?: string,
        }>,
        during?: Array<{
            behaviour: {
                type: string,
                show_ne_to_end?: boolean,
                one_shot?: boolean,
                disable_controls?: boolean,
                show_time_remaining?: boolean,
                force_choice?: boolean,
                overlay_class?: string,
            },
            start_time: number,
            duration?: number,
        }>,
    },
};

export type AssetCollection = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    asset_collection_type: string,
    meta?: Object,
    assets: {
        audio_src?: string,
        image_src?: string,
        av_src?: string,
        sub_src?: string,
        text_content?: string,
        text_src?: string,
        video_format?: string,
        audio_format?: string,
    },
};

export type StoryFetcher = (id: string) => Promise<Story>;
export type NarrativeElementFetcher = (id: string) => Promise<NarrativeElement>;
export type RepresentationCollectionFetcher = (id: string) => Promise<RepresentationCollection>;
export type RepresentationFetcher = (id: string) => Promise<Representation>;
export type AssetCollectionFetcher = (id: string) => Promise<AssetCollection>;
export type MediaFetcher = (uri: string, mediaType?:string) => Promise<string>;

export type ExperienceFetchers = {
    storyFetcher: StoryFetcher,
    narrativeElementFetcher: NarrativeElementFetcher,
    representationCollectionFetcher: RepresentationCollectionFetcher,
    representationFetcher: RepresentationFetcher,
    assetCollectionFetcher: AssetCollectionFetcher,
    mediaFetcher: MediaFetcher
}


export type BaseRenderer = {
    representation: Representation,
    assetCollectionFetcher: AssetCollectionFetcher,
    mediaFetcher: MediaFetcher,
    target: HTMLElement,
};

export type Renderers = { [type: string]: Class<BaseRenderer> };

export type DataResolver = {
    get: (name: string) => Promise<any>,
    set: (name: string, value: any) => any,
    saveToStorage: (name: string, value: any) => any,
    saveAllToStorage: () => any,
}

export type Settings = {
    target: HTMLElement,
    renderers?: Renderers,
    dataResolver: DataResolver,
    storyFetcher: StoryFetcher,
    narrativeElementFetcher: NarrativeElementFetcher,
    representationCollectionFetcher: RepresentationCollectionFetcher,
    representationFetcher: RepresentationFetcher,
    mediaFetcher: MediaFetcher,
};

export type AssetUrls = {
    noAssetIconUrl: string,
    noBackgroundAssetUrl?: string,
}
