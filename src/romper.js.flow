// @flow

export type Tags = { [key: string]: Array<string> };

export type SourceLocation = { [key: string]: string };

export type Beginning = {
    id: string,
    condition: any,
};

export type Link = {
    link_type: string,
    condition: any,
    target?: string,
};

export type NarrativeElement = {
    id: string,
    version: string,
    name: string,
    description: string,
    tags: Tags,
    presentation: {
        type: string,
        target: string,
    },
    links: Array<Link>,
};

export type Story = {
    id: string,
    version: string,
    name: string,
    tags?: Tags,
    beginnings: Array<Beginning>,
    narrative_elements: Array<NarrativeElement>,
};

export type DataResolver = (name: string) => Promise<any>;

export type StoryFetcher = (id: string) => Promise<Story>;

export type Representation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representation_type: string,
    asset_collection: {
        foreground?: string,
        background?: Array<string>,
        icon?: {
            default: string,
            active?: string,
        },
    },
    choices?: Array<{
        label: string,
        representation: Representation,
    }>,
    behaviours?: {
        start?: {
            type: string,
            image: string,
        },
        complete?: {
            type: string,
            image: string,
        },
    },
};

export type AssetCollection = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    type: string,
    assets: {
        audio_src?: string,
        image_src?: string,
        av_src?: string,
    },
};

export type Presentation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representations: Array<{
        representation: Representation,
        condition: any,
    }>,
};

export type PresentationFetcher = (id: string) => Promise<Presentation>;

export type AssetCollectionFetcher = (id: string) => Promise<AssetCollection>;

export type MediaFetcher = (uri: string) => Promise<string>;

export type BaseRenderer = {
    representation: Representation,
    assetCollectionFetcher: AssetCollectionFetcher,
    mediaFetcher: MediaFetcher,
    target: HTMLElement,
};

export type Renderers = { [type: string]: Class<BaseRenderer> };

export type Settings = {
    target: HTMLElement,
    renderers?: Renderers,
    dataResolver: DataResolver,
    storyFetcher: StoryFetcher,
    presentationFetcher: PresentationFetcher,
    mediaFetcher: MediaFetcher,
};
