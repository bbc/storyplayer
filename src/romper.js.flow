import type BaseRenderer from "./renderers/BaseRenderer";

export type Renderers = {[type: string]: Class<BaseRenderer>};

export type Settings = {
    storyId: string,
    target: HTMLElement,
    renderers?: Renderers,
    dataResolver: DataResolver,
    storyFetcher: StoryFetcher,
    presentationFetcher: PresentationFetcher,
};

export type Tags = {[key: string]: Array<string>};

export type Beginning = {
    id: string,
    condition: any
};

export type Link = {
    link_type: string,
    condition: any,
    target?: string,
};

export type NarrativeElement = {
    id: string,
    version: string,
    name: string,
    description: string,
    tags: Tags,
    presentation: {
        type: string,
        target: string
    },
    links: Array<Link>
};

export type Story = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    beginnings: Array<Beginning>,
    narrative_objects: Array<NarrativeElement>,
};

export type DataResolver = (name: string) => Promise<any>;

export type StoryFetcher = (id: string) => Promise<Story>;

export type SimpleAVRepresentation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representation_type: "SIMPLE_AV",
    asset_collection: string,
};

export type Representation = SimpleAVRepresentation;

export type Presentation = {
    id: string,
    version: string,
    name: string,
    tags: Tags,
    representations: Array<{
        representation: Representation,
        condition: any
    }>
};

export type PresentationFetcher = (id: string) => Promise<Presentation>;
